// @generated by protobuf-ts 2.0.7 with parameter long_type_string
// @generated from protobuf file "example_subscriber.proto" (package "proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ExampleSubscriber } from "./example_subscriber";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ExampleResponseEvent } from "./example_subscriber";
import type { ExampleSubscribeRequest } from "./example_subscriber";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.ExampleSubscriber
 */
export interface IExampleSubscriberClient {
    /**
     * @generated from protobuf rpc: Subscribe(proto.ExampleSubscribeRequest) returns (stream proto.ExampleResponseEvent);
     */
    subscribe(input: ExampleSubscribeRequest, options?: RpcOptions): ServerStreamingCall<ExampleSubscribeRequest, ExampleResponseEvent>;
}
/**
 * @generated from protobuf service proto.ExampleSubscriber
 */
export class ExampleSubscriberClient implements IExampleSubscriberClient, ServiceInfo {
    typeName = ExampleSubscriber.typeName;
    methods = ExampleSubscriber.methods;
    options = ExampleSubscriber.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Subscribe(proto.ExampleSubscribeRequest) returns (stream proto.ExampleResponseEvent);
     */
    subscribe(input: ExampleSubscribeRequest, options?: RpcOptions): ServerStreamingCall<ExampleSubscribeRequest, ExampleResponseEvent> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExampleSubscribeRequest, ExampleResponseEvent>("serverStreaming", this._transport, method, opt, input);
    }
}
